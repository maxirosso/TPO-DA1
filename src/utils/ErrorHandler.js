import { LogBox } from 'react-native';

// ConfiguraciÃ³n para ocultar errores a usuarios finales pero mantenerlos en desarrollo
export const configureErrorHandling = () => {
  // En producciÃ³n, ocultar todos los warnings y errores que no sean crÃ­ticos
  if (!__DEV__) {
    // Ocultar la consola de errores de React Native para usuarios finales
    console.disableYellowBox = true;
    
    // Suprimir logs especÃ­ficos que no son crÃ­ticos para el usuario final
    LogBox.ignoreAllLogs(true);
    
    // Override console methods para producciÃ³n
    const originalConsoleError = console.error;
    const originalConsoleWarn = console.warn;
    
    console.error = (...args) => {
      // En producciÃ³n, no mostrar errores en pantalla pero aÃºn logearlos para debugging remoto
      const errorMessage = args.join(' ');
      
      // Solo logeamos errores crÃ­ticos que podrÃ­an afectar la funcionalidad
      if (errorMessage.includes('Network') || 
          errorMessage.includes('fetch') || 
          errorMessage.includes('HTTP')) {
        originalConsoleError(...args);
      }
      // Otros errores se silencian para el usuario final
    };
    
    console.warn = (...args) => {
      // En producciÃ³n, silenciar warnings que no son crÃ­ticos
      const warningMessage = args.join(' ');
      
      // Solo mostrar warnings crÃ­ticos
      if (warningMessage.includes('deprecated') || 
          warningMessage.includes('security')) {
        originalConsoleWarn(...args);
      }
      // Otros warnings se silencian
    };
    
    // Handler global para errores no capturados
    const defaultHandler = ErrorUtils.getGlobalHandler();
    ErrorUtils.setGlobalHandler((error, isFatal) => {
      // En producciÃ³n, manejar errores silenciosamente
      if (isFatal) {
        // Solo para errores fatales, mostrar mensaje genÃ©rico
        console.log('Error fatal detectado - la aplicaciÃ³n se reiniciarÃ¡');
      }
      
      // Llamar al handler por defecto para que la app no se cuelgue
      defaultHandler(error, isFatal);
    });
  } else {
    // En desarrollo, mantener todos los errores y warnings visibles
    console.log('ðŸ”§ Modo desarrollo: Todos los errores y warnings estÃ¡n habilitados');
    
    // Opcionalmente, puedes silenciar warnings especÃ­ficos que sepas que no son importantes
    LogBox.ignoreLogs([
      // Puedes agregar aquÃ­ warnings especÃ­ficos que quieras ignorar incluso en desarrollo
      // 'Warning: componentWillReceiveProps has been renamed',
    ]);
  }
};

// FunciÃ³n para restaurar el comportamiento normal de console (Ãºtil para debugging)
export const enableAllLogs = () => {
  if (__DEV__) {
    LogBox.ignoreAllLogs(false);
    console.log('âœ… Todos los logs estÃ¡n habilitados para debugging');
  }
};

// FunciÃ³n para silenciar logs especÃ­ficos por patrÃ³n
export const silenceSpecificErrors = (patterns) => {
  if (Array.isArray(patterns)) {
    LogBox.ignoreLogs(patterns);
    if (__DEV__) {
      console.log('ðŸ”‡ Errores especÃ­ficos silenciados:', patterns);
    }
  }
}; 